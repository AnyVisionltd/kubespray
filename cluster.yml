---
- hosts: localhost
  gather_facts: false
  become: no
  tasks:
    - name: "Check ansible version >=2.7.8"
      assert:
        msg: "Ansible must be v2.7.8 or higher"
        that:
          - ansible_version.string is version("2.7.8", ">=")
      tags:
        - check
  vars:
    ansible_connection: local

- hosts: bastion[0]
  gather_facts: False
  roles:
    - { role: kubespray-defaults }
    - { role: bastion-ssh-config, tags: ["localhost", "bastion"]}


- hosts: 'k8s-cluster:!localhost'
  gather_facts: false
  any_errors_fatal: true
  tasks:
  - name: wait for for target connection to become reachable on port 22
    wait_for:
      port: 22
      host: "{{ hostvars[item].ansible_host }}"
      connect_timeout: 15
      timeout: 300
      state: present
    with_items: "{{ groups['k8s-cluster'] }}"

# install python as PREQ 
- hosts: all
  gather_facts: false
  any_errors_fatal: true
  pre_tasks:
    - name: 'install prerequisites packages'
      raw: if [ -x "$(command -v apt)" ]; then apt update && apt install -y python-minimal; fi
      ignore_errors: true

# Validation IP and GW
- hosts: all
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - fail:
        msg: "{{inventory_hostname}} has not valid ip"
      when: (hostvars[inventory_hostname]['ansible_default_ipv4']['address'] is not defined) or hostvars[inventory_hostname]['ansible_default_ipv4']['gateway'] is not defined

# AirGap 
- hosts: all
  gather_facts: true
  any_errors_fatal: true
  vars:
    airgap: False
  pre_tasks:
    - debug:
        var: airgap
    - fail:
        msg: 'Variable {{repository_address}} is not defined while airgap mode is requested, either manually define {{repository_address}} or disable airgap mode'
      when: (airgap is defined and airgap == True) and repository_address is not defined
    - name: 'clear all original repositories'
      raw: if [ -f /etc/apt/sources.list ]; then cp -n /etc/apt/sources.list /etc/apt/sources.list.original; fi
      when: airgap is defined and airgap == True
    - name: 'install local repository'
      raw: echo "deb [arch=amd64 trusted=yes allow-insecure=yes] {{repository_address}} bionic main" > /etc/apt/sources.list
      when: airgap is defined and airgap == True

- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: false
  roles:
    - { role: kubespray-defaults }
    - { role: bootstrap-os, tags: bootstrap-os}

- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  vars:
    ansible_ssh_pipelining: true
  gather_facts: false
  pre_tasks:
    - name: gather facts from all instances
      setup:
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['k8s-cluster'] + groups['etcd'] + groups['calico-rr']|default([]) }}"
      run_once: true

- hosts: k8s-cluster:etcd:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  pre_tasks:
    - name: include airgap installation variables
      include_vars: vars/airgap_download.yml
      when: airgap is defined and airgap == True
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/preinstall, tags: preinstall }
    - { role: "container-engine", tags: "container-engine", when: deploy_container_engine|default(true) }
    - { role: load-kubernetes-images, tags: load-kubernetes-images, when: "airgap is defined and airgap == True", delegate_to: 127.0.0.1 }
    - { role: download, tags: download, when: "not skip_downloads" }
  environment: "{{ proxy_env }}"

- hosts: etcd
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: etcd, tags: etcd, etcd_cluster_setup: true, etcd_events_cluster_setup: "{{ etcd_events_cluster_enabled }}" }

- hosts: k8s-cluster:calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: etcd, tags: etcd, etcd_cluster_setup: false, etcd_events_cluster_setup: false }

- hosts: k8s-cluster
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  pre_tasks:
    - name: check if nvidia gpu exist in lspci
      shell: "lspci | grep ' VGA '"
      register: nvidia_device_lspci
      ignore_errors: true
    - name: check if nvidia gpu exist in lshw
      shell: "lshw -C display"
      register: nvidia_device_lshw
      ignore_errors: true
  roles:
    - { role: kernel_params, become: yes, tags: ["kernel"] }
    - { role: kubespray-defaults }
    - { role: kubernetes/node, tags: node }
    #- { role: nvidia-prerequisite, become: yes, tags: ["nvidia-driver"] }
    #- { role: nvidia-driver, become: yes, tags: ["nvidia-driver"] }
    #- { role: nvidia-docker, become: yes, tags: ["nvidia-docker"] }
    - { role: ansible-role-nvidia-driver, become: yes, tags: ["nvidia-driver"] }
    - { role: ansible-role-nvidia-docker, become: yes, tags: ["nvidia-docker"] }
    - { role: docker-settings, become: yes , tags: ["docker-settings"] }
  environment: "{{ proxy_env }}"

- hosts: kube-master
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/master, tags: master }
    - { role: kubernetes/client, tags: client }
    - { role: kubernetes-apps/cluster_roles, tags: cluster-roles }

- hosts: k8s-cluster
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/kubeadm, tags: kubeadm}
    - { role: network_plugin, tags: network }

- hosts: kube-master[0]
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps/rotate_tokens, tags: rotate_tokens, when: "secret_changed|default(false)" }
    - { role: win_nodes/kubernetes_patch, tags: ["master", "win_nodes"]}
    #- { role: kubernetes-labels, tags: kubernetes-labels}

- hosts: kube-master
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps/network_plugin, tags: network }
    - { role: kubernetes-apps/policy_controller, tags: policy-controller }
    - { role: kubernetes-apps/ingress_controller, tags: ingress-controller }
    - { role: kubernetes-apps/external_provisioner, tags: external-provisioner }

- hosts: calico-rr
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: network_plugin/calico/rr, tags: network }

- hosts: kube-master
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps, tags: apps }
    - { role: kubernetes-apps/chartmuseum, tags: ["apps", "chartmuseum"] }
    - { role: kubernetes-apps/rancher, tags: ["apps", "rancher"] }
    - { role: load-app-images, tags: load-app-images, when: "registry_enabled and airgap is defined and airgap == True" }
  environment: "{{proxy_env}}"

- hosts: k8s-cluster
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults}
    - { role: kubernetes/preinstall, when: "dns_mode != 'none' and resolvconf_mode == 'host_resolvconf'", tags: resolvconf, dns_late: true }
